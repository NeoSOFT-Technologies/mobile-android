apply plugin: 'jacoco'

ext {
    coverageExclusions = [
            '**/*Activity*.*',
            '**/*Fragment*.*',
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
    ]
}

jacoco {
    toolVersion = "${Versions.jacoco}"
    reportsDir = file("$buildDir/reports")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    // https://github.com/gradle/gradle/issues/5184#issuecomment-457865951
    jacoco.excludes = ['jdk.internal.*']
}


tasks.withType(Test) {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: coverageExclusions)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: coverageExclusions)
    def mainSrc = "${project.projectDir}/src/main/java"

    additionalSourceDirs.from = files(mainSrc)
    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree], [kotlinDebugTree])

    executionData(
            project.fileTree(project.rootDir.absolutePath).include(
                    "**/*.exec", // JaCoCo unit tests binary report
                    "**/*.ec" // JaCoCo android tests binary report
            )
    )

    reports {
        xml.required.set(true)
        html.required.set(true)
        csv.required.set(true)
        xml.destination file("$reportsDir/jacoco/jacoco.xml")
        html.destination file("$reportsDir/jacoco/coverage")
        csv.destination file("$reportsDir/jacoco/jacoco.csv")
    }
}