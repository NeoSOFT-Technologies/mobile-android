apply plugin: 'jacoco'

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

ext {
    coverageExclusions = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            'androidx/**/*.*',
            '**/*$ViewInjector*.*',
            '**/*Dagger*.*',
            '**/*MembersInjector*.*',
            '**/*_Factory.*',
            '**/*_Provide*Factory*.*',
            '**/*_ViewBinding*.*',
            '**/AutoValue_*.*',
            '**/R2.class',
            '**/R2$*.class',
            '**/*Directions$*',
            '**/*Directions.*',
            '**/*Binding.*'
    ]
}

project.afterEvaluate {

    (android.hasProperty('applicationVariants') ? android.'applicationVariants' : android.'libraryVariants')
            .all { variant ->
                def variantName = variant.name
                def capVariantName = variantName.capitalize()
                def testTaskName = "test${capVariantName}UnitTest"
                tasks.create(name: "${variantName}Coverage", type: JacocoReport, dependsOn: testTaskName) {

                    group = "Reporting"
                    description = "Generate Jacoco coverage reports for the ${variantName} build."

                    reports {
                        xml.required.set(true)
                        html.required.set(true)
                    }

                    def jClasses = "${project.buildDir}/intermediates/javac/${variantName}/classes"
                    def kClasses = "${project.buildDir}/tmp/kotlin-classes/${variantName}"
                    def javaClasses = fileTree(dir: jClasses, excludes: coverageExclusions)

                    def kotlinClasses = fileTree(dir: kClasses, excludes: coverageExclusions)

                    classDirectories.from = files([javaClasses, kotlinClasses])
                    def sourceDirs = ["${project.projectDir}/src/main/java", "${project.projectDir}/src/main/kotlin",
                                      "${project.projectDir}/src/${variantName}/java", "${project.projectDir}/src/${variantName}/kotlin"]

                    sourceDirectories.from = files(sourceDirs)

                    executionData.from = files(["${project.buildDir}/jacoco/${testTaskName}.exec"])
                }
            }

    tasks.register('coverAllVariants') {
        dependsOn(provider {
            tasks.findAll { task -> task.name.endsWith('Coverage') }
        })
    }
}
